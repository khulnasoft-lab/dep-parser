name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.24'
  COVERAGE_THRESHOLD: 80

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run linting
      run: make lint

    - name: Check go mod tidy
      run: make check-go-mod-tidy

    - name: Check licenses
      run: make check-licenses

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: ${{ matrix.go-version }}

    - name: Run unit tests
      run: make unit

    - name: Upload coverage to Codecov
      if: matrix.go-version == env.GO_VERSION
      uses: codecov/codecov-action@v4
      with:
        file: ./.tmp/unit-coverage-details.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt=sarif -out=gosec.sarif ./...
      continue-on-error: true

    - name: Upload Gosec scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'gosec.sarif'
      continue-on-error: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy.sarif'
      continue-on-error: true

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [lint, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.24']
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: ${{ matrix.go-version }}

    - name: Build project
      run: go build -v ./...

    - name: Test build artifacts
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          go build -o dep-parser.exe ./cmd/dep-parser || echo "No main cmd package found"
        else
          go build -o dep-parser ./cmd/dep-parser || echo "No main cmd package found"
        fi

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run integration tests
      run: |
        # Look for integration test files and run them
        find . -name "*_integration_test.go" -type f | while read -r file; do
          dir=$(dirname "$file")
          echo "Running integration tests in $dir"
          go test -v "$dir" -run "TestIntegration"
        done || echo "No integration tests found"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, test, build, integration]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate build artifacts
      run: |
        # Create build directory
        mkdir -p dist
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o dist/dep-parser-linux-amd64 ./cmd/dep-parser || echo "No main cmd package found"
        GOOS=linux GOARCH=arm64 go build -o dist/dep-parser-linux-arm64 ./cmd/dep-parser || echo "No main cmd package found"
        GOOS=darwin GOARCH=amd64 go build -o dist/dep-parser-darwin-amd64 ./cmd/dep-parser || echo "No main cmd package found"
        GOOS=darwin GOARCH=arm64 go build -o dist/dep-parser-darwin-arm64 ./cmd/dep-parser || echo "No main cmd package found"
        GOOS=windows GOARCH=amd64 go build -o dist/dep-parser-windows-amd64.exe ./cmd/dep-parser || echo "No main cmd package found"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Generate documentation
      run: |
        # Generate godoc documentation
        go install golang.org/x/tools/cmd/godoc@latest
        echo "Documentation generation placeholder"
        # Add actual documentation generation commands here

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
      continue-on-error: true
