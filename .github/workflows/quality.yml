name: Code Quality

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: '1.24'

    - name: Run staticcheck
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...

    - name: Run ineffassign
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        ineffassign ./...

    - name: Run misspell
      run: |
        go install github.com/client9/misspell/cmd/misspell@latest
        misspell -error *.go */*.go

    - name: Check for TODO comments
      run: |
        # Find TODO comments and fail if any are found (except in test files)
        if grep -r "TODO\|FIXME\|XXX" --include="*.go" . | grep -v "_test.go" | grep -v ".github"; then
          echo "TODO/FIXME/XXX comments found in non-test files. Please address them."
          exit 1
        fi

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: '1.24'

    - name: Run benchmarks
      run: |
        # Find and run benchmark tests
        find . -name "*_test.go" -type f | xargs grep -l "func Benchmark" | while read -r file; do
          dir=$(dirname "$file")
          echo "Running benchmarks in $dir"
          cd "$dir"
          go test -bench=. -benchmem -run=^$ . 2>&1 | tee benchmark.txt
          cd - > /dev/null
        done || echo "No benchmarks found"

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      if: always()
      with:
        tool: 'go'
        output-file-path: benchmark.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        # Show alert with commit comment on detecting possible performance regression
        alert-threshold: '200%'
        comment-on-alert: true
        fail-on-alert: true
        alert-comment-cc-users: '@khulnasoft-lab/dep-parser-maintainers'

  complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: '1.24'

    - name: Run gocyclo
      run: |
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        gocyclo -over 15 . || echo "High complexity functions found"

    - name: Generate complexity report
      run: |
        echo "# Code Complexity Report" > complexity-report.md
        echo "Generated on: $(date)" >> complexity-report.md
        echo "" >> complexity-report.md
        echo "## Functions with complexity > 15" >> complexity-report.md
        echo "" >> complexity-report.md
        gocyclo -over 15 . >> complexity-report.md || echo "No high complexity functions found"

    - name: Upload complexity report
      uses: actions/upload-artifact@v4
      with:
        name: complexity-report
        path: complexity-report.md

  documentation:
    name: Documentation Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Bootstrap dependencies
      uses: ./.github/actions/bootstrap
      with:
        go-version: '1.24'

    - name: Check documentation coverage
      run: |
        go install github.com/haya14busa/goverage@latest
        go install github.com/gojp/goreportcard/cmd/goreportcard-cli@latest
        
        # Check if all public functions have documentation
        echo "Checking documentation coverage..."
        
        # Generate a simple documentation report
        find . -name "*.go" -not -path "./.tmp/*" -not -name "*_test.go" | while read -r file; do
          # Count public functions without documentation
          undocumented=$(grep -n "^func [A-Z]" "$file" | grep -v "// " | wc -l)
          if [ "$undocumented" -gt 0 ]; then
            echo "File $file has $undocumented undocumented public functions"
          fi
        done

    - name: Generate godoc
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        echo "Documentation available at: http://localhost:6060/pkg/github.com/khulnasoft/dep-parser/"
        # Note: In CI, we can't actually serve godoc, but we can validate it compiles
        godoc -html > /dev/null 2>&1 || echo "godoc generation completed"
